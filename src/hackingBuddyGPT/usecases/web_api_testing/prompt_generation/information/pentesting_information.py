from typing import Dict, List

from hackingBuddyGPT.usecases.web_api_testing.prompt_generation.information.prompt_information import PromptPurpose


class PenTestingInformation:
    """
    A class to provide penetration testing steps and analysis based on different purposes
    such as authentication, input validation, error handling, etc.

    Attributes:
        schemas (dict): A dictionary containing valid schemas for input validation tests.
        explore_steps (dict): A dictionary mapping each PromptPurpose to a list of exploration steps.
        exploit_steps (dict): A dictionary mapping each PromptPurpose to a list of exploitation steps.
    """

    def __init__(self, schemas: Dict[str, List[str]] = None) -> object:
        """
        Initializes the PenTestingInformation with optional schemas.

        Args:
            schemas (dict, optional): A dictionary containing valid schemas for input validation tests. Default is None.
        """
        self.schemas = schemas if schemas is not None else {}
        self.explore_steps = self.init_steps

    @property
    def init_steps(self) -> Dict[PromptPurpose, List[str]]:
        """
        Provides initial penetration testing steps for various purposes.

        Returns:
            dict: A dictionary where each key is a PromptPurpose and each value is a list of steps.
        """
        return {
            PromptPurpose.AUTHENTICATION_AUTHORIZATION: [
                "Verify if there exists an authentication mechanism, the effectiveness of the authentication mechanism, "
                "that only authorized users or applications can access the APIs, and if the API enforces proper authorization "
                "checks to prevent unauthorized access to resources."
            ],
            PromptPurpose.INPUT_VALIDATION: [
                f"Examine how the API handles various types of user input by crafting and sending a POST request with valid data. "
                f"Valid schemas are {self.schemas}.",
                f"Examine how the API handles various types of user input by crafting and sending a POST request with invalid data. "
                f"Valid schemas are {self.schemas}.",
                f"Examine how the API handles various types of user input by crafting and sending a POST request with edge data. "
                f"Valid schemas are {self.schemas}.",
                f"Omit required fields to see if the API correctly identifies them as missing by sending a POST request. "
                f"Valid schemas are {self.schemas}.",
                f"Include special characters or injection attempts (e.g., SQL Injection, XSS) to see if the API sanitizes inputs properly, "
                f"by sending a POST request. Valid schemas are {self.schemas}.",
                f"Send data that doesnâ€™t match the expected format by a POST request. Valid data formats are {self.schemas}.",
                "Check for proper error handling, response codes, and sanitization.",
                "Attempt to exploit common vulnerabilities by injecting malicious inputs, such as SQL injection, NoSQL injection, "
                "cross-site scripting, and other injection attacks. Evaluate whether the API properly validates, escapes, and sanitizes "
                "all user-supplied data, ensuring no unexpected behavior or security vulnerabilities are exposed."
            ],
            PromptPurpose.ERROR_HANDLING_INFORMATION_LEAKAGE: [
                "Check how the API handles errors and if there are detailed error messages.",
                "Look for vulnerabilities and information leakage."
            ],
            PromptPurpose.SESSION_MANAGEMENT: [
                "Check if the API uses session management.",
                "Look at the session handling mechanism for vulnerabilities such as session fixation, session hijacking, or session timeout settings."
            ],
            PromptPurpose.CROSS_SITE_SCRIPTING: [
                "Look for vulnerabilities that could enable malicious scripts to be injected into API responses."
            ],
            PromptPurpose.CROSS_SITE_FORGERY: [
                "Look for vulnerabilities that could enable unauthorized actions to be performed on behalf of authenticated users."
            ],
            PromptPurpose.BUSINESS_LOGIC_VULNERABILITIES: [
                "Examine the API's business logic and identify flaws that can be exploited for unauthorized access, manipulation, or data exposure."
            ],
            PromptPurpose.RATE_LIMITING_THROTTLING: [
                "Check if the API has adequate rate-limiting and throttling controls to prevent abuse and denial-of-service attacks."
            ],
            PromptPurpose.SECURITY_MISCONFIGURATIONS: [
                "Check the API's configuration settings and determine if they expose sensitive information or create security weaknesses."
            ],
            PromptPurpose.LOGGING_MONITORING: [
                "Examine the logging and monitoring capabilities of the API and check if security incidents are detected and responded to promptly."
            ],
        }

    def analyse_steps(self, response: str = "") -> Dict[PromptPurpose, List[str]]:
        """
        Provides prompts for analysis based on the provided response for various purposes using an LLM.

        Args:
            response (str, optional): The HTTP response to analyze. Default is an empty string.

        Returns:
            dict: A dictionary where each key is a PromptPurpose and each value is a list of prompts.
        """
        return {
            PromptPurpose.PARSING: [f"""  Please parse this response and extract the following details in JSON format: {{
                    "Status Code": "<status code>",
                    "Reason Phrase": "<reason phrase>",
                    "Headers": <headers as JSON>,
                    "Response Body": <body as JSON>
                    from this response: {response}

                }}"""

                                    ],
            PromptPurpose.ANALYSIS: [
                f'Given the following parsed HTTP response:\n{response}\n'
                'Please analyze this response to determine:\n'
                '1. Whether the status code is appropriate for this type of request.\n'
                '2. If the headers indicate proper security and rate-limiting practices.\n'
                '3. Whether the response body is correctly handled.'
            ],
            PromptPurpose.DOCUMENTATION: [
                f'Based on the analysis provided, document the findings of this API response validation:\n{response}'
            ],
            PromptPurpose.REPORTING: [
                f'Based on the documented findings : {response}. Suggest any improvements or issues that should be reported to the API developers.'
            ]
        }

